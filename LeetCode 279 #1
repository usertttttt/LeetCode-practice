#Time Limit Exceeded
class Solution:
    def numSquares(self, n: int) -> int:

        # 预处理出 <=sqrt(n) 的完全平方数
        nums = []
        i = 1
        while i*i <= n:
            nums.append(i*i)
            i += 1

        # 转化为完全背包问题【套用「322. 零钱兑换」】
        target = n
        length = len(nums)
        dp = [[target+1] * (target+1) for _ in range(length+1)]    # 初始化为一个较大的值，如 +inf 或 target+1
        dp[0][0] = 0    # 合法的初始化；其他 dp[0][j]均不合法
        
        # 完全背包：优化后的状态转移
        for i in range(1, length+1):             # 第一层循环：遍历nums
            for j in range(target+1):       # 第二层循环：遍历背包
                if j < nums[i-1]:           # 容量有限，无法选择第i个数字
                    dp[i][j] = dp[i-1][j]
                else:                       # 可选择第i个数字
                    dp[i][j] = min( dp[i-1][j], dp[i][j-nums[i-1]] + 1 )
        
        return dp[length][target] 
       
 #success
 class Solution:
    def numSquares(self, n: int) -> int:
        # 预处理出 <=sqrt(n) 的完全平方数
        nums = []
        i = 1
        while i*i <= n:
            nums.append(i*i)
            i += 1

        # 转化为完全背包问题
        target = n
        dp = [target] * (target+1)    # 初始化为一个较大的值，如 +inf 或 n
        dp[0] = 0    # 合法的初始化；其他 dp[j]均不合法
        
        # 完全背包：优化后的状态转移
        for num in nums:                        # 第一层循环：遍历nums
            for j in range(num, target+1):      # 第二层循环：遍历背包【正序】
                dp[j] = min( dp[j], dp[j-num] + 1 )
        
        return dp[target]
