class Solution:
    def characterReplacement(self, s: str, k: int) -> int:
        N = len(s)# 数组/字符串长度
        left, right = 0, 0 # [left, right] 都包含，闭区间
        
        counter = collections.Counter()# 用于统计 子数组/子区间 是否有效
        res = 0 # 保存最大的满足题目要求的 子数组/子串 长度
        while right < N: # 当右边的指针没有搜索到 数组/字符串 的结尾
            counter[s[right]] += 1# 增加当前右边指针的数字/字符的计数
            while right - left + 1 - counter.most_common(1)[0][1] > k:# 此时需要一直移动左指针，直至找到一个符合题意的区间
                counter[s[left]] -= 1# 移动左指针前需要从counter中减少left位置字符的计数
                left += 1 # 真正的移动左指针，注意不能跟上面一行代码写反
            # 到 while 结束时，我们找到了一个符合题意要求的 子数组/子串
            res = max(res, right - left + 1)# 需要更新结果
            right += 1# 移动右指针，去探索新的区间
        return res
